+   txt <- paste0("Corr. = ", r)
+   text(0.5, 0.5, txt, cex = 2)
}
pairs(df1[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)
panel.cor <- function(x, y){
r <- round(cor(x, y),3)
txt <- paste0("Corr. = ", r)
text(0.5, 0.5, txt, cex = 2)
}
pairs(df1[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)
df_white %>% head
df_red %>% head
df_red %>% head()
example(pairs)
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(df1[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)
txt <- paste0("Corr. = ", r)
panel.cor <- function(x, y){
r <- round(cor(x, y),3)
txt <- paste0("Corr. = ", r)
text(0.5, 0.5, txt, cex = 2)
}
pairs(df1[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
r <- abs(cor(x, y))
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(df1[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(df_red[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
pairs(df_white[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
ggpairs(df_red[2:13])
ggpairs(df_red[2:13] %>% sample_n(1000))
#You do not need to touch this chunk
#words after "#" sign are treated as comments
#It is strongly recommanded to use English in r markdown
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")    # ggplot2 패키지 설치(한번만 설치하면 됨)
#install.packages("dplyr")      # dplyr 패키지 설치(한번만 설치하면 됨)
#install.packages("GGally")     # GGally 패키지 설치(한번만 설치하면 됨)
#install.packages("gridExtra")  # gridExtra 패키지 설치(한번만 설치하면 됨)
library(ggplot2)
library(dplyr)
library(GGally)
library(gridExtra)
df = read.csv("data/train.csv", header = TRUE)    # csv file을 df라는 변수에 저장
head(df)
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
summary(df)    # 최대값, 최소값, 사분위수 등의 기본적인 통계량 확인 가능
unique(df$type)
colSums(is.na(df))
df_red <- df %>% filter(type=='red')
df_red %>% head
df_white <- df %>% filter(type=='white')
df_white %>% head
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(df_red[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
pairs(df_white[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
pl1 = df %>% ggplot(aes(x=quality)) +
geom_histogram() +
facet_wrap(~ type)
pl2 = df %>% ggplot(aes(x=fixed.acidity)) +
geom_density() +
facet_wrap(~ type)
pl3 = df %>% ggplot(aes(x=volatile.acidity)) +
geom_density() +
facet_wrap(~ type)
pl4 = df %>% ggplot(aes(x=citric.acid)) +
geom_density() +
facet_wrap(~ type)
pl5 = df %>% ggplot(aes(x=residual.sugar)) +    # 그래프가 좀 이상함. outlier 값이 있을 것으로 예상됨.
geom_density() +
facet_wrap(~ type)
pl6 = df %>% ggplot(aes(x=chlorides)) +
geom_density() +
facet_wrap(~ type)
pl7 = df %>% ggplot(aes(x=free.sulfur.dioxide)) +
geom_density() +
facet_wrap(~ type)
pl8 = df %>% ggplot(aes(x=total.sulfur.dioxide)) +
geom_density() +
facet_wrap(~ type)
pl9 = df %>% ggplot(aes(x=density)) +
geom_density() +
facet_wrap(~ type)
pl10 = df %>% ggplot(aes(x=pH)) +
geom_density() +
facet_wrap(~ type)
pl11 = df %>% ggplot(aes(x=sulphates)) +
geom_density() +
facet_wrap(~ type)
pl12 = df %>% ggplot(aes(x=alcohol)) +
geom_density() +
facet_wrap(~ type)
grid.arrange(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, nrow=4, ncol=3)
box1 <-  df %>% ggplot(aes(quality, fixed.acidity, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box2 <-  df %>% ggplot(aes(quality, volatile.acidity, group=quality)) +    # red 와인의 경우 음의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box3 <- df %>% ggplot(aes(quality, citric.acid, group=quality)) +    # red 와인의 경우 양의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box4 <- df %>% ggplot(aes(quality, residual.sugar, group=quality)) +    # 이상치 때문에 제대로 관측 불가
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box5 <- df %>% ggplot(aes(quality, chlorides, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box6 <- df %>% ggplot(aes(quality, free.sulfur.dioxide, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box7 <- df %>% ggplot(aes(quality, total.sulfur.dioxide, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box8 <- df %>% ggplot(aes(quality, density, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box9 <- df %>% ggplot(aes(quality, pH, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box10 <- df %>% ggplot(aes(quality, sulphates, group=quality)) +    # red의 경우 양의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box11 <- df %>% ggplot(aes(quality, alcohol, group=quality)) +    # 둘 다 대체적으로 양의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
grid.arrange(box1, box2, box3, box4, box5, box6, box7, box8, box9, box10, box11, nrow=6, ncol=2)
df_red %>% ggplot(aes(quality, residual.sugar, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red')
df_white %>% ggplot(aes(x = citric.acid, y = residual.sugar, color=as.factor(quality))) +
geom_point()
df_white %>% filter(quality <= 5) %>% ggplot(aes(x = citric.acid, y = residual.sugar, color=as.factor(quality))) +
geom_point()
df_white %>% filter(quality >= 7) %>% ggplot(aes(x = citric.acid, y = residual.sugar, color=as.factor(quality))) +
geom_point()
df_white %>%
filter(quality!=6) %>%
mutate(new_quality = ifelse(quality > 6, 'high', 'low')) %>%
ggplot(aes(x = citric.acid, y = residual.sugar, color=new_quality)) +
geom_point()
df_red %>%
filter(quality!=6) %>%
mutate(new_quality = ifelse(quality > 6, 'high', 'low')) %>%
ggplot(aes(x = citric.acid, y = sulphates, color=new_quality)) +
geom_point()
y = df_red['quality']
x = df_red['alcohol']
D = data.frame(y, x)
lm_alcohol = lm(quality~., data=D)
summary(lm_alcohol)
y = df_red['quality']
x = df_red['citric.acid']
D = data.frame(y, x)
lm_alcohol = lm(quality~., data=D)
summary(lm_alcohol)
y = df_white['quality']
x = df_white['citric.acid']
D = data.frame(y, x)
lm_alcohol = lm(quality~., data=D)
summary(lm_alcohol)
df_white %>% ggplot(aes(x = citric.acid, y = residual.sugar, color=as.factor(quality))) +
geom_point()
df_white %>% ggplot(aes(x = citric.acid, y = residual.sugar, color=as.factor(quality))) +
geom_point()
df_white %>%
filter(quality!=6) %>%
mutate(new_quality = ifelse(quality > 6, 'high', 'low')) %>%
ggplot(aes(x = citric.acid, y = residual.sugar, color=new_quality)) +
geom_point()
table(df$type)
table(df$type)
#You do not need to touch this chunk
#words after "#" sign are treated as comments
#It is strongly recommanded to use English in r markdown
knitr::opts_chunk$set(echo = TRUE)
library(gridExtra)
library(ggplot2)
library(dplyr)
library(GGally)
library(gridExtra)
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
df = read.csv("data/train.csv", header = TRUE)    # csv file을 df라는 변수에 저장
head(df)
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
#You do not need to touch this chunk
#words after "#" sign are treated as comments
#It is strongly recommanded to use English in r markdown
knitr::opts_chunk$set(echo = TRUE)
df = read.csv("data/train.csv", header = TRUE)    # csv file을 df라는 변수에 저장
head(df)
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
df = read.csv("data/train.csv", header = TRUE)    # csv file을 df라는 변수에 저장
head(df)
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
#You do not need to touch this chunk
#words after "#" sign are treated as comments
#It is strongly recommanded to use English in r markdown
knitr::opts_chunk$set(echo = TRUE)
#install.packages("ggplot2")    # ggplot2 패키지 설치(한번만 설치하면 됨)
#install.packages("dplyr")      # dplyr 패키지 설치(한번만 설치하면 됨)
#install.packages("GGally")     # GGally 패키지 설치(한번만 설치하면 됨)
#install.packages("gridExtra")  # gridExtra 패키지 설치(한번만 설치하면 됨)
library(ggplot2)
library(dplyr)
library(GGally)
library(gridExtra)
df = read.csv("data/train.csv", header = TRUE)    # csv file을 df라는 변수에 저장
head(df)
glimpse(df)    # 변수별로 대략적인 형태를 볼 수 있음
summary(df)    # 최대값, 최소값, 사분위수 등의 기본적인 통계량 확인 가능
table(df$type)
colSums(is.na(df))
df_red <- df %>% filter(type=='red')
df_red %>% head
df_white <- df %>% filter(type=='white')
df_white %>% head
# 상관계수를 출력해주기 위한 함수
panel.cor <- function(x, y, digits = 2, prefix = "", cex.cor, ...){
usr <- par("usr"); on.exit(par(usr))
par(usr = c(0, 1, 0, 1))
r <- abs(cor(x, y))
txt <- format(c(r, 0.123456789), digits = digits)[1]
txt <- paste0(prefix, txt)
if(missing(cex.cor)) cex.cor <- 0.8/strwidth(txt)
text(0.5, 0.5, txt, cex = cex.cor * r)
}
pairs(df_red[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
pairs(df_white[2:13] %>%  sample_n(1000),
upper.panel = panel.cor)# red wine 데이터의 변수별 산점도행렬 확인
# wine의 type별 column 변수의 histogram 분포
pl1 = df %>% ggplot(aes(x=quality)) +
geom_histogram() +
facet_wrap(~ type)
pl2 = df %>% ggplot(aes(x=fixed.acidity)) +
geom_density() +
facet_wrap(~ type)
pl3 = df %>% ggplot(aes(x=volatile.acidity)) +
geom_density() +
facet_wrap(~ type)
pl4 = df %>% ggplot(aes(x=citric.acid)) +
geom_density() +
facet_wrap(~ type)
pl5 = df %>% ggplot(aes(x=residual.sugar)) +
geom_density() +
facet_wrap(~ type)
pl6 = df %>% ggplot(aes(x=chlorides)) +
geom_density() +
facet_wrap(~ type)
pl7 = df %>% ggplot(aes(x=free.sulfur.dioxide)) +
geom_density() +
facet_wrap(~ type)
pl8 = df %>% ggplot(aes(x=total.sulfur.dioxide)) +
geom_density() +
facet_wrap(~ type)
pl9 = df %>% ggplot(aes(x=density)) +
geom_density() +
facet_wrap(~ type)
pl10 = df %>% ggplot(aes(x=pH)) +
geom_density() +
facet_wrap(~ type)
pl11 = df %>% ggplot(aes(x=sulphates)) +
geom_density() +
facet_wrap(~ type)
pl12 = df %>% ggplot(aes(x=alcohol)) +
geom_density() +
facet_wrap(~ type)
grid.arrange(pl1, pl2, pl3, pl4, pl5, pl6, pl7, pl8, pl9, pl10, pl11, pl12, nrow=4, ncol=3)
# wine의 type별 column 변수의 boxplot 분포
box1 <-  df %>% ggplot(aes(quality, fixed.acidity, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box2 <-  df %>% ggplot(aes(quality, volatile.acidity, group=quality)) +    # red 와인의 경우 음의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box3 <- df %>% ggplot(aes(quality, citric.acid, group=quality)) +    # red 와인의 경우 양의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box4 <- df %>% ggplot(aes(quality, residual.sugar, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box5 <- df %>% ggplot(aes(quality, chlorides, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box6 <- df %>% ggplot(aes(quality, free.sulfur.dioxide, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box7 <- df %>% ggplot(aes(quality, total.sulfur.dioxide, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box8 <- df %>% ggplot(aes(quality, density, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box9 <- df %>% ggplot(aes(quality, pH, group=quality)) +
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box10 <- df %>% ggplot(aes(quality, sulphates, group=quality)) +    # red의 경우 양의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
box11 <- df %>% ggplot(aes(quality, alcohol, group=quality)) +    # 둘 다 대체적으로 양의 상관관계
geom_jitter(col='gray') +
geom_boxplot(alpha = .5, outlier.color = 'red') +
facet_wrap(~ type)
grid.arrange(box1, box2, box3, box4, box5, box6, box7, box8, box9, box10, box11, nrow=6, ncol=2)
df_white %>% ggplot(aes(x = citric.acid, y = residual.sugar, color=as.factor(quality))) +
geom_point()
df_white %>%
filter(quality!=6) %>%
mutate(new_quality = ifelse(quality > 6, 'high', 'low')) %>%
ggplot(aes(x = citric.acid, y = residual.sugar, color=new_quality)) +
geom_point()
#You do not need to touch this chunk
#words after "#" sign are treated as comments
#It is strongly recommanded to use English in r markdown
knitr::opts_chunk$set(echo = TRUE)
library(ggplot2)
library(dplyr)
library(GGally)
library(gridExtra)
df = read.csv("data/train.csv", header = TRUE)    # csv file을 df라는 변수에 저장
df %>% head
wilcox.test(data = df, quality ~ type)
wilcox.test(data = df, quality ~ atype)
wilcox.test(data = df, quality ~ type)
wilcox.test(data = df, alcohol ~ type)
wilcox.test(data = df, quality ~ type)
wilcox.test(data = df, alcohol ~ type)
wilcox.test(data = df, alcohol ~ type)
lm_ori_step <- step(lm_ori, direction = "both")
df_red_lm <- df_red[, c(2:13)]  # 회귀분석을 할 때 필요하지 않은 index와 type 열을 제외시킨 새로운 dataframe을 만들어 주었다.
df_red <- df %>% filter(type=='red')
df_red %>% head
df_white <- df %>% filter(type=="white")
df_white %>% head
df_red_lm <- df_red[, c(2:13)]  # 회귀분석을 할 때 필요하지 않은 index와 type 열을 제외시킨 새로운 dataframe을 만들어 주었다.
lm_ori <- lm(quality~ ., data = df_red_lm)    # balance 값이 들어가지 않은 기본 linear model
lm_ori_step <- step(lm_ori, direction = "both")
summary(lm_ori_step)
df_red_lm <- df_red[, c(2:13)]  # 회귀분석을 할 때 필요하지 않은 index와 type 열을 제외시킨 새로운 dataframe을 만들어 주었다.
df_red_lm %>% head
lm_red_ori <- lm(quality~ ., data = df_red_lm)    # balance 값이 들어가지 않은 기본 linear model
summary(lm_red_ori)
df_white_lm <- df_white[, c(2:13)]  # 회귀분석을 할 때 필요하지 않은 index와 type 열을 제외시킨 새로운 dataframe을 만들어 주었다.
df_white_lm %>% head
df_red_lm <- df_red[, c(2:13)]  # 회귀분석을 할 때 필요하지 않은 index와 type 열을 제외시킨 새로운 dataframe을 만들어 주었다.
df_red_lm %>% head
lm_ori <- lm(quality~ ., data = df_red_lm)    # balance 값이 들어가지 않은 기본 linear model
lm_ori_step <- step(lm_ori, direction = "both")
lm_ori_step <- step(lm_ori, direction = "both")
summary(lm_ori_step)
summary(lm_ori_step)
df_white_lm <- df_white[, c(2:13)]  # 회귀분석을 할 때 필요하지 않은 index와 type 열을 제외시킨 새로운 dataframe을 만들어 주었다.
df_white_lm %>% head
lm_white_ori <- lm(quality~ ., data = df_white_lm)    # balance 값이 들어가지 않은 기본 linear model
lm_white_ori_step <- step(lm_white_ori, direction = "both")
summary(lm_white_ori_step)
lm_red_ori_step <- step(lm_red_ori, direction = "backward")
summary(lm_red_ori_step)
lm_white_ori_step <- step(lm_white_ori, direction = "backward")
summary(lm_white_ori_step)
attr(lm_white_ori_step)
summary(lm_white_ori_step)
attr(lm_white_ori_step)
names(lm_white_ori_step)
coefficients(lm_white_ori_step)
str(coefficients(lm_white_ori_step))
coefficients(lm_white_ori_step) %>% str
coefficients(lm_white_ori_step) %>% names
lm_1 <- lm(quality~ coefficients(lm_white_ori_step) %>% names, data = df_red_1)
df_red_1 <- df_red_lm %>% mutate(balance = abs(residual.sugar - mean(residual.sugar)) + abs(citric.acid - mean(citric.acid)) + abs(alcohol - mean(alcohol)))  # (1)번 방법을 사용하여 balance를 구해 df_red_1 열에 추가해 줌
df_red_1 <- df_red_1 %>% mutate(residual.sugar = scale(residual.sugar, center = TRUE, scale = FALSE), citric.acid = scale(citric.acid, center = TRUE, scale = FALSE))  # balance까지 설명변수로 추가하여 구한 linear model
lm_1 <- lm(quality~ coefficients(lm_white_ori_step) %>% names, data = df_red_1)
coefficients(lm_red_ori_step) %>% names
lm_1 <- lm(quality~ volatile.acidity + citric.acid + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol + balance, data = df_red_1)
summary(lm_1)
df_red_2 <- df_red_lm %>% mutate(balance = sqrt((residual.sugar - mean(residual.sugar))^2 + (citric.acid - mean(citric.acid))^2) + (alcohol - mean(alcohol))^2)  # (2)번 방법을 사용하여 balance를 구해 df_red_1 열에 추가해 줌
df_red_2 <- df_red_2 %>% mutate(residual.sugar = scale(residual.sugar, center = TRUE, scale = FALSE), citric.acid = scale(citric.acid, center = TRUE, scale = FALSE))  # balance까지 설명변수로 추가하여 구한 linear model
lm_2 <- lm(quality~ volatile.acidity + citric.acid + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol + balance, data = df_red_2)
summary(lm_2)
df_white_1 <- df_white_lm %>% mutate(balance = abs(residual.sugar - mean(residual.sugar)) + abs(citric.acid - mean(citric.acid)) + abs(alcohol - mean(alcohol)))  # (1)번 방법을 사용하여 balance를 구해 df_red_1 열에 추가해 줌
df_white_1 <- df_white_1 %>% mutate(residual.sugar = scale(residual.sugar, center = TRUE, scale = FALSE), citric.acid = scale(citric.acid, center = TRUE, scale = FALSE))
lm_white_1 <- lm(quality~ fixed.acidity + volatile.acidity + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol + balance, data = df_red_1)  # balance까지 설명변수로 추가하여 구한 linear model
summary(lm_red_1)
summary(lm_white_1)
df_white_1 <- df_white_lm %>% mutate(balance = abs(residual.sugar - mean(residual.sugar)) + abs(citric.acid - mean(citric.acid)) + abs(alcohol - mean(alcohol)))  # (1)번 방법을 사용하여 balance를 구해 df_red_1 열에 추가해 줌
df_white_1 <- df_white_1 %>% mutate(residual.sugar = scale(residual.sugar, center = TRUE, scale = FALSE), citric.acid = scale(citric.acid, center = TRUE, scale = FALSE))
lm_white_1 <- lm(quality~ fixed.acidity + volatile.acidity + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol + balance, data = df_white_1)  # balance까지 설명변수로 추가하여 구한 linear model
summary(lm_white_1)
df_white_2 <- df_white_lm %>% mutate(balance = sqrt((residual.sugar - mean(residual.sugar))^2 + (citric.acid - mean(citric.acid))^2) + (alcohol - mean(alcohol))^2)  # (2)번 방법을 사용하여 balance를 구해 df_red_1 열에 추가해 줌
df_white_2 <- df_white_2 %>% mutate(residual.sugar = scale(residual.sugar, center = TRUE, scale = FALSE), citric.acid = scale(citric.acid, center = TRUE, scale = FALSE))  # balance까지 설명변수로 추가하여 구한 linear model
lm_white_2 <- lm(quality~ volatile.acidity + citric.acid + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol + balance, data = df_white_2)
lm_white_2 <- lm(quality~ fixed.acidity + volatile.acidity + residual.sugar + free.sulfur.dioxide + density + pH + sulphates + alcohol + balance, data = df_white_2)
summary(lm_red_2)
summary(lm_white_2)
makeAcc <- function(pred, ans){
cnt <- 0
for (i in 1:length(pred)){
if (pred[i] == ans[i]) {
cnt <- cnt + 1
}
}
return (cnt / length(pred))
}
lm_red_ori_answer = sapply(lm_ori %>% predict %>% unname, round)
lm_red_ori_answer = sapply(lm_red_ori %>% predict %>% unname, round)
makeAcc(lm_red_ori_answer, df_red$quality)
lm_red_1_answer = sapply(lm_red_1 %>% predict %>% unname, round)
lm_red_1 <- lm(quality~ volatile.acidity + citric.acid + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol + balance, data = df_red_1)  # balance까지 설명변수로 추가하여 구한 linear model
summary(lm_red_1)
lm_red_2 <- lm(quality~ volatile.acidity + citric.acid + chlorides + free.sulfur.dioxide + total.sulfur.dioxide + pH + sulphates + alcohol + balance, data = df_red_2)
summary(lm_red_2)
lm_red_1_answer = sapply(lm_red_1 %>% predict %>% unname, round)
makeAcc(lm_1_answer)
makeAcc(lm_red_1_answer, df_red$quality)
makeAcc(lm_red_ori_answer, df_red$quality)
makeAcc(lm_red_1_answer, df_red$quality)
lm_red_ori_answer = sapply(lm_red_ori %>% predict %>% unname, round)
makeAcc(lm_red_ori_answer, df_red$quality)
lm_red_1_answer = sapply(lm_red_1 %>% predict %>% unname, round)
makeAcc(lm_red_1_answer, df_red$quality)
lm_red_2_answer = sapply(lm_red_2 %>% predict %>% unname, round)
makeAcc(lm_red_2_answer, df_red$quality)
lm_red_ori_answer = sapply(lm_red_ori %>% predict %>% unname, round)
makeAcc(lm_red_ori_answer, df_red$quality)
lm_red_1_answer = sapply(lm_red_1 %>% predict %>% unname, round)
makeAcc(lm_red_1_answer, df_red$quality)
lm_red_2_answer = sapply(lm_red_2 %>% predict %>% unname, round)
makeAcc(lm_red_2_answer, df_red$quality)
lm_white_ori_answer = sapply(lm_white_ori %>% predict %>% unname, round)
makeAcc(lm_white_ori_answer, df_white$quality)
lm_white_1_answer = sapply(lm_white_1 %>% predict %>% unname, round)
makeAcc(lm_white_1_answer, df_white$quality)
lm_white_2_answer = sapply(lm_white_2 %>% predict %>% unname, round)
makeAcc(lm_white_2_answer, df_white$quality)
lm_red_ori_answer = sapply(lm_red_ori %>% predict %>% unname, round)
makeAcc(lm_red_ori_answer, df_red$quality)
lm_red_1_answer = sapply(lm_red_1 %>% predict %>% unname, round)
makeAcc(lm_red_1_answer, df_red$quality)
lm_red_2_answer = sapply(lm_red_2 %>% predict %>% unname, round)
makeAcc(lm_red_2_answer, df_red$quality)
lm_white_ori_answer = sapply(lm_white_ori %>% predict %>% unname, round)
makeAcc(lm_white_ori_answer, df_white$quality)
lm_white_1_answer = sapply(lm_white_1 %>% predict %>% unname, round)
makeAcc(lm_white_1_answer, df_white$quality)
lm_white_2_answer = sapply(lm_white_2 %>% predict %>% unname, round)
makeAcc(lm_white_2_answer, df_white$quality)
